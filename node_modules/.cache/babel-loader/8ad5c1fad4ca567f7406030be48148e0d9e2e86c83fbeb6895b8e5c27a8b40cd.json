{"ast":null,"code":"var _jsxFileName = \"/Users/lokeshbudda/Documents/drawing-guessing-game/src/components/DrawingApp.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io();\nconst DrawingApp = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [lineWidth, setLineWidth] = useState(5);\n  const [strokeColor, setStrokeColor] = useState(\"#000000\");\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 600;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineCap = \"round\";\n\n    // Fill the canvas with a white background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    let isDrawing = false;\n    const startDrawing = e => {\n      isDrawing = true;\n      ctx.beginPath();\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      ctx.moveTo(offsetX, offsetY);\n      socket.emit(\"drawing\", {\n        x: offsetX,\n        y: offsetY,\n        lineWidth,\n        strokeColor\n      });\n    };\n    const draw = e => {\n      if (!isDrawing) return;\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      ctx.lineTo(offsetX, offsetY);\n      ctx.stroke();\n\n      // Emit the current line being drawn\n      socket.emit(\"drawing\", {\n        x: offsetX,\n        y: offsetY,\n        lineWidth,\n        strokeColor\n      });\n    };\n    const stopDrawing = () => {\n      isDrawing = false;\n      ctx.closePath();\n    };\n    canvas.addEventListener(\"mousedown\", startDrawing);\n    canvas.addEventListener(\"mousemove\", draw);\n    canvas.addEventListener(\"mouseup\", stopDrawing);\n    canvas.addEventListener(\"mouseleave\", stopDrawing);\n    socket.on(\"drawing\", ({\n      x,\n      y,\n      lineWidth,\n      strokeColor\n    }) => {\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = strokeColor;\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    });\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startDrawing);\n      canvas.removeEventListener(\"mousemove\", draw);\n      canvas.removeEventListener(\"mouseup\", stopDrawing);\n      canvas.removeEventListener(\"mouseleave\", stopDrawing);\n      socket.off(\"drawing\");\n    };\n  }, [lineWidth, strokeColor]);\n  const clearCanvas = () => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    // Fill the canvas with a white rectangle\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, 800, 600);\n    socket.emit(\"clear\"); // Emit clear event to clear all clients' canvases\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Draw.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"stroke\",\n        children: \"Stroke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stroke\",\n        type: \"color\",\n        value: strokeColor,\n        onChange: e => setStrokeColor(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lineWidth\",\n        children: \"Line Width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lineWidth\",\n        type: \"number\",\n        value: lineWidth,\n        onChange: e => setLineWidth(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drawing-board\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        id: \"drawing-board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingApp, \"m4UQJxVo7cBLR1XFBpaskJQ8esc=\");\n_c = DrawingApp;\nexport default DrawingApp;\nvar _c;\n$RefreshReg$(_c, \"DrawingApp\");","map":{"version":3,"names":["React","useRef","useState","useEffect","io","jsxDEV","_jsxDEV","socket","DrawingApp","_s","canvasRef","lineWidth","setLineWidth","strokeColor","setStrokeColor","canvas","current","width","height","ctx","getContext","strokeStyle","lineCap","fillStyle","fillRect","isDrawing","startDrawing","e","beginPath","offsetX","offsetY","nativeEvent","moveTo","emit","x","y","draw","lineTo","stroke","stopDrawing","closePath","addEventListener","on","removeEventListener","off","clearCanvas","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","value","onChange","target","Number","onClick","ref","_c","$RefreshReg$"],"sources":["/Users/lokeshbudda/Documents/drawing-guessing-game/src/components/DrawingApp.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io();\n\nconst DrawingApp = () => {\n  const canvasRef = useRef(null);\n  const [lineWidth, setLineWidth] = useState(5);\n  const [strokeColor, setStrokeColor] = useState(\"#000000\");\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 600;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineCap = \"round\";\n\n    // Fill the canvas with a white background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    let isDrawing = false;\n\n    const startDrawing = (e) => {\n      isDrawing = true;\n      ctx.beginPath();\n      const { offsetX, offsetY } = e.nativeEvent;\n      ctx.moveTo(offsetX, offsetY);\n      socket.emit(\"drawing\", { x: offsetX, y: offsetY, lineWidth, strokeColor });\n    };\n\n    const draw = (e) => {\n      if (!isDrawing) return;\n      const { offsetX, offsetY } = e.nativeEvent;\n      ctx.lineTo(offsetX, offsetY);\n      ctx.stroke();\n\n      // Emit the current line being drawn\n      socket.emit(\"drawing\", { x: offsetX, y: offsetY, lineWidth, strokeColor });\n    };\n\n    const stopDrawing = () => {\n      isDrawing = false;\n      ctx.closePath();\n    };\n\n    canvas.addEventListener(\"mousedown\", startDrawing);\n    canvas.addEventListener(\"mousemove\", draw);\n    canvas.addEventListener(\"mouseup\", stopDrawing);\n    canvas.addEventListener(\"mouseleave\", stopDrawing);\n\n    socket.on(\"drawing\", ({ x, y, lineWidth, strokeColor }) => {\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = strokeColor;\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    });\n\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startDrawing);\n      canvas.removeEventListener(\"mousemove\", draw);\n      canvas.removeEventListener(\"mouseup\", stopDrawing);\n      canvas.removeEventListener(\"mouseleave\", stopDrawing);\n      socket.off(\"drawing\");\n    };\n  }, [lineWidth, strokeColor]);\n\n  const clearCanvas = () => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    // Fill the canvas with a white rectangle\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, 800, 600);\n    socket.emit(\"clear\"); // Emit clear event to clear all clients' canvases\n  };\n\n  return (\n    <section className=\"container\">\n      <div id=\"toolbar\">\n        <h1>Draw.</h1>\n        <label htmlFor=\"stroke\">Stroke</label>\n        <input\n          id=\"stroke\"\n          type=\"color\"\n          value={strokeColor}\n          onChange={(e) => setStrokeColor(e.target.value)}\n        />\n        <label htmlFor=\"lineWidth\">Line Width</label>\n        <input\n          id=\"lineWidth\"\n          type=\"number\"\n          value={lineWidth}\n          onChange={(e) => setLineWidth(Number(e.target.value))}\n        />\n        <button onClick={clearCanvas}>\n          Clear\n        </button>\n      </div>\n      <div className=\"drawing-board\">\n        <canvas ref={canvasRef} id=\"drawing-board\"></canvas>\n      </div>\n    </section>\n  );\n};\n\nexport default DrawingApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}